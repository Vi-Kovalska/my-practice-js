/* empty css                      */import{a as n,i}from"./assets/vendor-Cbhu4xvy.js";(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const r of document.querySelectorAll('link[rel="modulepreload"]'))s(r);new MutationObserver(r=>{for(const c of r)if(c.type==="childList")for(const l of c.addedNodes)l.tagName==="LINK"&&l.rel==="modulepreload"&&s(l)}).observe(document,{childList:!0,subtree:!0});function o(r){const c={};return r.integrity&&(c.integrity=r.integrity),r.referrerPolicy&&(c.referrerPolicy=r.referrerPolicy),r.crossOrigin==="use-credentials"?c.credentials="include":r.crossOrigin==="anonymous"?c.credentials="omit":c.credentials="same-origin",c}function s(r){if(r.ep)return;r.ep=!0;const c=o(r);fetch(r.href,c)}})();n({method:"get",url:"https://jsonplaceholder.typicode.com/users"}).then(e=>console.log(e)).catch(e=>console.log(e));n.get("https://jsonplaceholder.typicode.com/users").then(e=>console.log(e)).catch(e=>console.log(e));n.get("https://jsonplaceholder.typicode.com/users").then(e=>{console.log(e.data),console.log(e.status),console.log(e.statusText),console.log(e.headers),console.log(e.config)}).catch(e=>{console.log(e)});n.defaults.baseURL="https://jsonplaceholder.typicode.com";const v="secret-api-key-for-every-request";n.defaults.headers.common["header-name"]=v;n.get("https://jsonplaceholder.typicode.com/users",{params:{_limit:7,_sort:"name"}});const T=async()=>{const e=await n.get("https://jsonplaceholder.typicode.com/users");return console.log(e.data),e.data};T().then(e=>console.log(e));const w=async()=>(await n.get("https://jsonplaceholder.typicode.com/users")).data;w().then(e=>console.log(e)).catch(e=>console.log(e));const P=async()=>(await n.get("https://jsonplaceholder.typicode.com/users")).data,S=async()=>{try{const e=await P();console.log(e)}catch(e){console.log(e)}};S();const p=document.querySelector(".btn-pagination"),f=document.querySelector(".posts");let m=1,k=10;p.addEventListener("click",async()=>{try{const e=await I();R(e),m+=1,m>1&&(p.textContent="Fetch more posts")}catch(e){console.log(e)}});async function I(){const e=new URLSearchParams({_limit:k,_page:m});return(await n.get(`https://jsonplaceholder.typicode.com/posts?${e}`)).data}function R(e){const t=e.map(({id:o,title:s,body:r,userId:c})=>`<li>
          <h2 class="post-title">${s.slice(0,30)}</h2>
          <p><b>Post id</b>: ${o}</p>
          <p><b>Author id</b>: ${c}</p>
          <p class="post-body">${r}</p>
        </li>`).join("");f.insertAdjacentHTML("beforeend",t)}let d=1,y=40;const A=Math.ceil(100/y);p.addEventListener("click",async()=>{if(d>A)return i.error({position:"topRight",message:"We're sorry, there are no more posts to load"});try{const e=await E();C(e),d+=1,d>1&&(p.textContent="Fetch more posts")}catch(e){console.log(e)}});async function E(){const e=new URLSearchParams({_limit:y,_page:d});return(await n.get(`https://jsonplaceholder.typicode.com/posts?${e}`)).data}function C(e){const t=e.map(({id:o,title:s,body:r,userId:c})=>`<li>
          <h2 class="post-title">${s.slice(0,30)}</h2>
          <p><b>Post id</b>: ${o}</p>
          <p><b>Author id</b>: ${c}</p>
          <p class="post-body">${r}</p>
        </li>`).join("");f.insertAdjacentHTML("beforeend",t)}const a="https://jsonplaceholder.typicode.com";async function N(){const e=await n(`${a}/users/1/todos`),t=await n(`${a}/users/2/todos`),o=await n(`${a}/users/3/todos`);return[e,t,o]}N().then(e=>console.log(e)).catch(e=>console.log(e));async function O(){const t=[1,2,3].map(async s=>{const r=await n(`${a}/users/${s}/todos`);return console.log(r.data),r.data}),o=await Promise.all(t);return console.log(o),o}O().then(e=>{const[t,o,s]=e;console.log(t)}).catch(e=>console.log(e));const _=document.querySelector(".todoForm"),h=document.querySelector(".todoList");async function u(e=a,t={}){const o=await n(`${e}/users/1/todos`,t);return console.log(o.data),o.data}function $(e){return e.map(({id:t,title:o,completed:s})=>`
  <li class='todoCard' data-id='${t}'>
  <input type='checkbox' class='todoCheckbox' ${s?"checked":""}/>
  <h2 class='todoTitle'>${o.slice(0,20)}</h2>
  <button class='todoBtnDel'>X</button>
  </li>`).join("")}u(a,{params:{_limit:5}}).then(e=>h.insertAdjacentHTML("beforeend",$(e))).catch(e=>i.error({position:"topRight",message:`Sorry, we are have a problem...${e.message}`,displayMode:1}));_.addEventListener("submit",D);async function D(e){e.preventDefault();const t=e.target.elements.todo.value;if(t.trim())try{const o=await u(`${a}`,{method:"POST",data:{title:t,completed:!1}});console.log(o),h.insertAdjacentHTML("beforeend",$([o]))}catch(o){return i.error({position:"topRight",message:`Sorry...${o.message}`,displayMode:1})}finally{e.target.reset()}}h.addEventListener("click",J);async function J(e){if(!e.target.classList.contains("todoCheckbox")){console.log("ops it is not a checkbox!");return}e.preventDefault();const t=e.target.closest(".todoCard");console.log(t);const o=t.dataset.id;console.log(o);try{console.log(e.target.checked);const s=await u(`${a}/${o}`,{method:"PATCH",data:{completed:e.target.checked}});e.target.checked=s.completed}catch(s){return i.error({position:"topRight",message:`Sorry...${s.message}`,displayMode:1})}}h.addEventListener("click",x);async function x(e){if(!e.target.classList.contains("todoBtnDel"))return;const t=e.target.closest(".todoCard"),o=t.dataset.id;try{await u(`${a}/${o}`,{method:"DELETE"}),t.remove()}catch(s){return i.error({position:"topRight",message:`Sorry...${s.message}`,displayMode:1})}}const Z="eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJhMWIxNTk0NzI5ZDlhODRlZjZkZTU2MmRiMjJiOTRkZSIsIm5iZiI6MTczNDUzMDE1Ny43ODIsInN1YiI6IjY3NjJkNDZkMTYxYWI3ZGVjNWZmZTgzMiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.n11YprEyAIsNVgOqkidenCI4yQs_Y4WRKkJJKM74lkc",b=document.querySelector(".jsMovieList");document.querySelector(".jsLoadMore");const q="/trending/movie/week",U={root:null,rootMargin:"300px",threshold:1},H=new IntersectionObserver(z,U),j=document.querySelector(".jsGuard");let g=1;async function L(e,t){const o={method:e,headers:{accept:"application/json",Authorization:`Bearer ${Z}`}},s=new URLSearchParams({page:`${t}`});return(await fetch(`https://api.themoviedb.org/3${q}?${s}`,o)).json()}L("GET",g).then(e=>{console.log(e),b.insertAdjacentHTML("beforeend",M(e.results)),e.page<e.total_pages&&H.observe(j)}).catch(e=>i.error({position:"topRight",message:`Sorry...${e.message}`,displayMode:1}));function M(e){return e.map(({poster_path:t,id:o,title:s,release_date:r,overview:c,vote_average:l})=>`<li class='movieCard' data-id='${o}'>
    <div class='posterContainer'>
<a href="#"><img class='moviePoster' src="https://image.tmdb.org/t/p/w300${t}" alt="${c}" ></a>
</div>
<div class="movieInfo">
  <h2>${s}</h2>
  <p>${c.slice(0,350)}</p>
<p>The vote average: ${l}</p>
<p>The release date: ${r}</p>
</div>
</li>`).join("")}async function z(e,t){e.forEach(o=>{o.intersectionRatio&&(g+=1,L("GET",g).then(s=>{b.insertAdjacentHTML("beforeend",M(s.results)),s.page>=s.total_pages&&t.unobserve(j);const c=document.querySelector(".movieCard").getBoundingClientRect().height;window.scrollBy({left:0,top:c*2,behavior:"smooth"})}).catch(s=>i.error({position:"topRight",message:`Sorry...${s.message}`,displayMode:1})))})}
//# sourceMappingURL=index.js.map
